const path = require("path");
const fs = require("fs");
const utils = require("../libs/utils");

/* Ready to Load */
const paths = {
    server: path.join(__dirname, ".."),
    config: path.join(__dirname, "..", "conf"),
    lib: path.join(__dirname, "..", "libs"),
}

/* Load Configuration Files : `conf` */
const internalConfigs = {}

fs.readdirSync(
        paths.config,
        { withFileTypes:true }
    )
    .filter(dirent => !dirent.isDirectory())
    .filter(dirent => dirent.name.includes(".config.js"))
    .map(dirent => dirent.name)
    .map(filename => {
        const id = path.basename(filename, path.extname(filename));
        return {
            id: path.basename(id, path.extname(id)),
            content: require(`${paths.config}/${id}`),
        }
    })
    .forEach(config=>{
        internalConfigs[config.id] = config.content;
    })
    
/* Load Source Files */
const scannedJson = utils.ModuleScanner.scan({
        from: internalConfigs.server.rootPath,
        extension: [".js"]
    })

const projectConfigName = path.basename(internalConfigs.server.configFile, path.extname(internalConfigs.server.configFile));
const projectConfigFile = scannedJson[projectConfigName];

if(!projectConfigFile) throw new ReferenceError(`not exists CONFIG FILE on root of project path : ${projectConfigName}`);

const projectConfig = require(`${projectConfigFile}`); // default project.config.js

const sourceFiles = scannedJson[projectConfig.project.source]

const sourceModules = []

utils.JSONHandler.action(sourceFiles, {
    returnValue: (value) => {
        sourceModules.push(value);
        return value;
    }
})


/* Mapping Loaded Source Files */
const boundedSourceModules = sourceModules.map(modulePath => {
    const modulePathArr = modulePath.split(path.sep)
    const rootPathPoint = modulePathArr.indexOf(projectConfig.project.source)
    return {
        [modulePathArr.slice(rootPathPoint + 1).join("/")] : modulePath
    }
})


console.log(boundedSourceModules)